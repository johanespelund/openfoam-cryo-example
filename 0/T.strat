/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2112                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
  version     2.0;
  format      ascii;
  class       volScalarField;
  object      T;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions [0 0 0 1 0 0 0];

#include "$FOAM_CASE/parameters"

internalField #codeStream
    {

        codeInclude
        #{
            #include "volFields.H"
            #include "Temperature.H"
        #};

        codeOptions
        #{
            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(FOAM_CASE)/InitialConditions \
        #};
    code
    #{
        const IOdictionary& d = static_cast<const IOdictionary&>(dict);
        const fvMesh& mesh = refCast<const fvMesh>(d.db());
        scalarField T(mesh.nCells(), 0.); /* initialization */

        forAll(T, i)
        {
          const scalar y = mesh.C()[i].y();
          T[i] = linear::profile(
            1.3981116959678555, 
            1.8922157277581289, 
            20.323373922455573, 
            30.323373922455573, 
            y );
        }

        writeEntry(os, "", T);

    #};
  };

boundaryField
{
  #includeEtc "caseDicts/setConstraintTypes"
  outlet
  {
      type externalWallHeatFluxTemperature;
      mode flux;
      kappaMethod fluidThermo;
      q uniform $q_wall;
      value           uniform $T_L;
  }
  wall
  {
      type externalWallHeatFluxTemperature;
      mode flux;
      kappaMethod fluidThermo;
      q uniform $q_wall;
      value uniform $T_L;
  }
  gas_to_metal
  {
      type externalWallHeatFluxTemperature;
      mode flux;
      kappaMethod fluidThermo;
      q uniform $q_wall;
      value uniform $T_L;
  }
  pipe
  {
      type externalWallHeatFluxTemperature;
      mode flux;
      kappaMethod fluidThermo;
      q uniform 0;
      value uniform $T_L;
  }
  gas_to_liquid
  {
        type            fixedValue;
        value           uniform $T_L;
  }
}

// ************************************************************************* //
